/*
 * Copyright (C) 2016 Fraunhofer Institut IOSB, Fraunhoferstr. 1, D 76131
 * Karlsruhe, Germany.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

options {
  MULTI = true;
  VISITOR = true;
  VISITOR_DATA_TYPE = "de.fraunhofer.iosb.ilt.frostserver.path.ResourcePath";
  VISITOR_RETURN_TYPE = "de.fraunhofer.iosb.ilt.frostserver.path.ResourcePath";
  NODE_DEFAULT_VOID = false;
  STATIC = false;
  DEBUG_TOKEN_MANAGER = false;
}

PARSER_BEGIN(Parser)

package de.fraunhofer.iosb.ilt.frostserver.parser.path;

/** A SensorThingsAPI path Grammar. */
public class Parser {

}

PARSER_END(Parser)


<DEFAULT,SUB_PROPS> TOKEN: {
  <PATH_SEPARATOR: "/" >
| <PP_VALUE: "$value" >
}

<DEFAULT> TOKEN: {
  < LB: "(" >
| < RB: ")" >
| <LONG:   ("-")?(["0"]|["1"-"9"](["0"-"9"])*) >
| <DOUBLE: <LONG> ("."(["0"-"9"])+)?(["E"]("-")?(["0"-"9"])+)? >
| <ENTITY_TYPE:     ["A"-"Z"](["A"-"Z", "a"-"z"])+ >
| <ENTITY_PROPERTY: ["a"-"z"](["A"-"Z", "a"-"z"])+ | "@iot.id" | "@iot.selfLink" > : SUB_PROPS
| <CP_REF:   "$ref" >
| <DOUBLESQUOTE: "''" >
| <STR_LIT: "'" (~["'"] | <DOUBLESQUOTE> )* "'" >
}

<SUB_PROPS>
TOKEN: {
  <PP_SUBPROPERTY: ["A"-"Z", "a"-"z"](["A"-"Z", "a"-"z", "0"-"9", "_", "-", "."])* >
| <PP_ARRAYINDEX: "[" <LONG> "]">
}


/** Main production. */
ASTStart Start() #Start : {}
{
  <PATH_SEPARATOR> IdentifiedPath() <EOF>
  { return jjtThis; }
}


/** Paths with identifiers */
void IdentifiedPath(): {}
{
  EntityType()
}

void EntityType(): {Token t;}
{
  t=<ENTITY_TYPE> {jjtThis.jjtSetValue(t.image);}
  (
    EntityId()
  | <PATH_SEPARATOR> ( EntityType()  | Ref() )
  )?
}


void EntityId()#entityId: {String i;}
{
  <LB> ( i=Long(){jjtThis.jjtSetValue(i);}
       | i=QuotedString(){jjtThis.jjtSetValue(i);}
       )
  <RB>
      (<PATH_SEPARATOR> EntityOrNavProperty())?
}


void EntityOrNavProperty() #void: {}
{
  ( EntityType()
  | EntityProperty()
  | Ref()
  )
}


void EntityProperty(): {Token t;}
{
  t=<ENTITY_PROPERTY> {jjtThis.jjtSetValue(t.image);}
  ( ArrayIndex() )?
  ( <PATH_SEPARATOR> ( SubProperty() | Value() ) )?
}



/**
 * Special properties.
 */
void SubProperty(): {Token t;}
{
  t=<PP_SUBPROPERTY> {jjtThis.jjtSetValue(t.image);}
  (ArrayIndex())?
  (<PATH_SEPARATOR> (SubProperty()|Value()) )?
}


void ArrayIndex(): {Token t;}
{
  t=<PP_ARRAYINDEX> {jjtThis.jjtSetValue(t.image);}
  (ArrayIndex())?
}


void Ref(): {}
{
  <CP_REF>
}
void Value(): {}
{
  <PP_VALUE>
}


String Long() #Long(>1): {Token t;}
{
  t=<LONG>
  {
    return t.image;
  }
}

String QuotedString() #String(>1): {Token t;}
{
  t=<STR_LIT>
  {
    return t.image;
  }
}
